// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/goCommonMarketData/fullMarketDataManagerService (interfaces: IFmdManager)

// Package fullMarketDataManagerService is a generated GoMock package.
package fullMarketDataManagerService

import (
	fmt "fmt"

	errors "github.com/bhbosman/gocommon/errors"
	"golang.org/x/net/context"
)

// Interface A Comment
// Interface github.com/bhbosman/goCommonMarketData/fullMarketDataManagerService
// Interface IFmdManager
// Interface IFmdManager, Method: GetInstrumentList
type IFmdManagerGetInstrumentListIn struct {
}

type IFmdManagerGetInstrumentListOut struct {
	Args0 []string
	Args1 error
}
type IFmdManagerGetInstrumentListError struct {
	InterfaceName string
	MethodName    string
	Reason        string
}

func (self *IFmdManagerGetInstrumentListError) Error() string {
	return fmt.Sprintf("error in data coming back from %v::%v. Reason: %v", self.InterfaceName, self.MethodName, self.Reason)
}

type IFmdManagerGetInstrumentList struct {
	inData         IFmdManagerGetInstrumentListIn
	outDataChannel chan IFmdManagerGetInstrumentListOut
}

func NewIFmdManagerGetInstrumentList(waitToComplete bool) *IFmdManagerGetInstrumentList {
	var outDataChannel chan IFmdManagerGetInstrumentListOut
	if waitToComplete {
		outDataChannel = make(chan IFmdManagerGetInstrumentListOut)
	} else {
		outDataChannel = nil
	}
	return &IFmdManagerGetInstrumentList{
		inData:         IFmdManagerGetInstrumentListIn{},
		outDataChannel: outDataChannel,
	}
}

func (self *IFmdManagerGetInstrumentList) Wait(onError func(interfaceName string, methodName string, err error) error) (IFmdManagerGetInstrumentListOut, error) {
	data, ok := <-self.outDataChannel
	if !ok {
		generatedError := &IFmdManagerGetInstrumentListError{
			InterfaceName: "IFmdManager",
			MethodName:    "GetInstrumentList",
			Reason:        "Channel for IFmdManager::GetInstrumentList returned false",
		}
		if onError != nil {
			err := onError("IFmdManager", "GetInstrumentList", generatedError)
			return IFmdManagerGetInstrumentListOut{}, err
		} else {
			return IFmdManagerGetInstrumentListOut{}, generatedError
		}
	}
	return data, nil
}

func (self *IFmdManagerGetInstrumentList) Close() error {
	close(self.outDataChannel)
	return nil
}
func CallIFmdManagerGetInstrumentList(context context.Context, channel chan<- interface{}, waitToComplete bool) (IFmdManagerGetInstrumentListOut, error) {
	if context != nil && context.Err() != nil {
		return IFmdManagerGetInstrumentListOut{}, context.Err()
	}
	data := NewIFmdManagerGetInstrumentList(waitToComplete)
	if waitToComplete {
		defer func(data *IFmdManagerGetInstrumentList) {
			err := data.Close()
			if err != nil {
			}
		}(data)
	}
	if context != nil && context.Err() != nil {
		return IFmdManagerGetInstrumentListOut{}, context.Err()
	}
	channel <- data
	var err error
	var v IFmdManagerGetInstrumentListOut
	if waitToComplete {
		v, err = data.Wait(func(interfaceName string, methodName string, err error) error {
			return err
		})
	} else {
		err = errors.NoWaitOperationError
	}
	if err != nil {
		return IFmdManagerGetInstrumentListOut{}, err
	}
	return v, nil
}

// Interface IFmdManager, Method: Send
type IFmdManagerSendIn struct {
	arg0 interface{}
}

type IFmdManagerSendOut struct {
	Args0 error
}
type IFmdManagerSendError struct {
	InterfaceName string
	MethodName    string
	Reason        string
}

func (self *IFmdManagerSendError) Error() string {
	return fmt.Sprintf("error in data coming back from %v::%v. Reason: %v", self.InterfaceName, self.MethodName, self.Reason)
}

type IFmdManagerSend struct {
	inData         IFmdManagerSendIn
	outDataChannel chan IFmdManagerSendOut
}

func NewIFmdManagerSend(waitToComplete bool, arg0 interface{}) *IFmdManagerSend {
	var outDataChannel chan IFmdManagerSendOut
	if waitToComplete {
		outDataChannel = make(chan IFmdManagerSendOut)
	} else {
		outDataChannel = nil
	}
	return &IFmdManagerSend{
		inData: IFmdManagerSendIn{
			arg0: arg0,
		},
		outDataChannel: outDataChannel,
	}
}

func (self *IFmdManagerSend) Wait(onError func(interfaceName string, methodName string, err error) error) (IFmdManagerSendOut, error) {
	data, ok := <-self.outDataChannel
	if !ok {
		generatedError := &IFmdManagerSendError{
			InterfaceName: "IFmdManager",
			MethodName:    "Send",
			Reason:        "Channel for IFmdManager::Send returned false",
		}
		if onError != nil {
			err := onError("IFmdManager", "Send", generatedError)
			return IFmdManagerSendOut{}, err
		} else {
			return IFmdManagerSendOut{}, generatedError
		}
	}
	return data, nil
}

func (self *IFmdManagerSend) Close() error {
	close(self.outDataChannel)
	return nil
}
func CallIFmdManagerSend(context context.Context, channel chan<- interface{}, waitToComplete bool, arg0 interface{}) (IFmdManagerSendOut, error) {
	if context != nil && context.Err() != nil {
		return IFmdManagerSendOut{}, context.Err()
	}
	data := NewIFmdManagerSend(waitToComplete, arg0)
	if waitToComplete {
		defer func(data *IFmdManagerSend) {
			err := data.Close()
			if err != nil {
			}
		}(data)
	}
	if context != nil && context.Err() != nil {
		return IFmdManagerSendOut{}, context.Err()
	}
	channel <- data
	var err error
	var v IFmdManagerSendOut
	if waitToComplete {
		v, err = data.Wait(func(interfaceName string, methodName string, err error) error {
			return err
		})
	} else {
		err = errors.NoWaitOperationError
	}
	if err != nil {
		return IFmdManagerSendOut{}, err
	}
	return v, nil
}

// Interface IFmdManager, Method: SubscribeFullMarketData
type IFmdManagerSubscribeFullMarketDataIn struct {
	arg0 string
}

type IFmdManagerSubscribeFullMarketDataOut struct {
}
type IFmdManagerSubscribeFullMarketDataError struct {
	InterfaceName string
	MethodName    string
	Reason        string
}

func (self *IFmdManagerSubscribeFullMarketDataError) Error() string {
	return fmt.Sprintf("error in data coming back from %v::%v. Reason: %v", self.InterfaceName, self.MethodName, self.Reason)
}

type IFmdManagerSubscribeFullMarketData struct {
	inData         IFmdManagerSubscribeFullMarketDataIn
	outDataChannel chan IFmdManagerSubscribeFullMarketDataOut
}

func NewIFmdManagerSubscribeFullMarketData(waitToComplete bool, arg0 string) *IFmdManagerSubscribeFullMarketData {
	var outDataChannel chan IFmdManagerSubscribeFullMarketDataOut
	if waitToComplete {
		outDataChannel = make(chan IFmdManagerSubscribeFullMarketDataOut)
	} else {
		outDataChannel = nil
	}
	return &IFmdManagerSubscribeFullMarketData{
		inData: IFmdManagerSubscribeFullMarketDataIn{
			arg0: arg0,
		},
		outDataChannel: outDataChannel,
	}
}

func (self *IFmdManagerSubscribeFullMarketData) Wait(onError func(interfaceName string, methodName string, err error) error) (IFmdManagerSubscribeFullMarketDataOut, error) {
	data, ok := <-self.outDataChannel
	if !ok {
		generatedError := &IFmdManagerSubscribeFullMarketDataError{
			InterfaceName: "IFmdManager",
			MethodName:    "SubscribeFullMarketData",
			Reason:        "Channel for IFmdManager::SubscribeFullMarketData returned false",
		}
		if onError != nil {
			err := onError("IFmdManager", "SubscribeFullMarketData", generatedError)
			return IFmdManagerSubscribeFullMarketDataOut{}, err
		} else {
			return IFmdManagerSubscribeFullMarketDataOut{}, generatedError
		}
	}
	return data, nil
}

func (self *IFmdManagerSubscribeFullMarketData) Close() error {
	close(self.outDataChannel)
	return nil
}
func CallIFmdManagerSubscribeFullMarketData(context context.Context, channel chan<- interface{}, waitToComplete bool, arg0 string) (IFmdManagerSubscribeFullMarketDataOut, error) {
	if context != nil && context.Err() != nil {
		return IFmdManagerSubscribeFullMarketDataOut{}, context.Err()
	}
	data := NewIFmdManagerSubscribeFullMarketData(waitToComplete, arg0)
	if waitToComplete {
		defer func(data *IFmdManagerSubscribeFullMarketData) {
			err := data.Close()
			if err != nil {
			}
		}(data)
	}
	if context != nil && context.Err() != nil {
		return IFmdManagerSubscribeFullMarketDataOut{}, context.Err()
	}
	channel <- data
	var err error
	var v IFmdManagerSubscribeFullMarketDataOut
	if waitToComplete {
		v, err = data.Wait(func(interfaceName string, methodName string, err error) error {
			return err
		})
	} else {
		err = errors.NoWaitOperationError
	}
	if err != nil {
		return IFmdManagerSubscribeFullMarketDataOut{}, err
	}
	return v, nil
}

// Interface IFmdManager, Method: UnsubscribeFullMarketData
type IFmdManagerUnsubscribeFullMarketDataIn struct {
	arg0 string
}

type IFmdManagerUnsubscribeFullMarketDataOut struct {
}
type IFmdManagerUnsubscribeFullMarketDataError struct {
	InterfaceName string
	MethodName    string
	Reason        string
}

func (self *IFmdManagerUnsubscribeFullMarketDataError) Error() string {
	return fmt.Sprintf("error in data coming back from %v::%v. Reason: %v", self.InterfaceName, self.MethodName, self.Reason)
}

type IFmdManagerUnsubscribeFullMarketData struct {
	inData         IFmdManagerUnsubscribeFullMarketDataIn
	outDataChannel chan IFmdManagerUnsubscribeFullMarketDataOut
}

func NewIFmdManagerUnsubscribeFullMarketData(waitToComplete bool, arg0 string) *IFmdManagerUnsubscribeFullMarketData {
	var outDataChannel chan IFmdManagerUnsubscribeFullMarketDataOut
	if waitToComplete {
		outDataChannel = make(chan IFmdManagerUnsubscribeFullMarketDataOut)
	} else {
		outDataChannel = nil
	}
	return &IFmdManagerUnsubscribeFullMarketData{
		inData: IFmdManagerUnsubscribeFullMarketDataIn{
			arg0: arg0,
		},
		outDataChannel: outDataChannel,
	}
}

func (self *IFmdManagerUnsubscribeFullMarketData) Wait(onError func(interfaceName string, methodName string, err error) error) (IFmdManagerUnsubscribeFullMarketDataOut, error) {
	data, ok := <-self.outDataChannel
	if !ok {
		generatedError := &IFmdManagerUnsubscribeFullMarketDataError{
			InterfaceName: "IFmdManager",
			MethodName:    "UnsubscribeFullMarketData",
			Reason:        "Channel for IFmdManager::UnsubscribeFullMarketData returned false",
		}
		if onError != nil {
			err := onError("IFmdManager", "UnsubscribeFullMarketData", generatedError)
			return IFmdManagerUnsubscribeFullMarketDataOut{}, err
		} else {
			return IFmdManagerUnsubscribeFullMarketDataOut{}, generatedError
		}
	}
	return data, nil
}

func (self *IFmdManagerUnsubscribeFullMarketData) Close() error {
	close(self.outDataChannel)
	return nil
}
func CallIFmdManagerUnsubscribeFullMarketData(context context.Context, channel chan<- interface{}, waitToComplete bool, arg0 string) (IFmdManagerUnsubscribeFullMarketDataOut, error) {
	if context != nil && context.Err() != nil {
		return IFmdManagerUnsubscribeFullMarketDataOut{}, context.Err()
	}
	data := NewIFmdManagerUnsubscribeFullMarketData(waitToComplete, arg0)
	if waitToComplete {
		defer func(data *IFmdManagerUnsubscribeFullMarketData) {
			err := data.Close()
			if err != nil {
			}
		}(data)
	}
	if context != nil && context.Err() != nil {
		return IFmdManagerUnsubscribeFullMarketDataOut{}, context.Err()
	}
	channel <- data
	var err error
	var v IFmdManagerUnsubscribeFullMarketDataOut
	if waitToComplete {
		v, err = data.Wait(func(interfaceName string, methodName string, err error) error {
			return err
		})
	} else {
		err = errors.NoWaitOperationError
	}
	if err != nil {
		return IFmdManagerUnsubscribeFullMarketDataOut{}, err
	}
	return v, nil
}

func ChannelEventsForIFmdManager(next IFmdManager, event interface{}) (bool, error) {
	switch v := event.(type) {
	case *IFmdManagerGetInstrumentList:
		data := IFmdManagerGetInstrumentListOut{}
		data.Args0, data.Args1 = next.GetInstrumentList()
		if v.outDataChannel != nil {
			v.outDataChannel <- data
		}
		return true, nil
	case *IFmdManagerSend:
		data := IFmdManagerSendOut{}
		data.Args0 = next.Send(v.inData.arg0)
		if v.outDataChannel != nil {
			v.outDataChannel <- data
		}
		return true, nil
	case *IFmdManagerSubscribeFullMarketData:
		data := IFmdManagerSubscribeFullMarketDataOut{}
		next.SubscribeFullMarketData(v.inData.arg0)
		if v.outDataChannel != nil {
			v.outDataChannel <- data
		}
		return true, nil
	case *IFmdManagerUnsubscribeFullMarketData:
		data := IFmdManagerUnsubscribeFullMarketDataOut{}
		next.UnsubscribeFullMarketData(v.inData.arg0)
		if v.outDataChannel != nil {
			v.outDataChannel <- data
		}
		return true, nil
	default:
		return false, nil
	}
}
